import {
  invariant
} from "./chunk-XQLJ6LI6.js";
import {
  renderToCanvas
} from "./chunk-2CJEYJ6R.js";
import "./chunk-HJ5GBFWD.js";
import "./chunk-CQ5EHLTX.js";
import "./chunk-QTDNXC42.js";
import {
  render
} from "./chunk-5F5ERZJH.js";
import {
  SNIPPET_RENDERED,
  SourceType,
  enhanceArgTypes
} from "./chunk-5IBRRZKI.js";
import {
  require_client_logger
} from "./chunk-O7PXM2HJ.js";
import "./chunk-JNRQPVTZ.js";
import "./chunk-VLFRXV27.js";
import "./chunk-ZU7AUN5Q.js";
import "./chunk-YESQDMID.js";
import "./chunk-FFLHUCZ7.js";
import "./chunk-XCV2MYBJ.js";
import "./chunk-PWWEHO4D.js";
import "./chunk-P3MYVYRC.js";
import "./chunk-JVKUB2XY.js";
import "./chunk-DK3MXV76.js";
import "./chunk-577KQH5M.js";
import "./chunk-R75WBIFD.js";
import "./chunk-OTWT4HE5.js";
import "./chunk-XABEMZSI.js";
import "./chunk-XVJ3QLXM.js";
import "./chunk-3XASU6ZJ.js";
import "./chunk-EGLE7FOG.js";
import "./chunk-EKZNKVF5.js";
import "./chunk-F6VRCBEC.js";
import "./chunk-XUTLBLUK.js";
import "./chunk-ORZF7IZZ.js";
import "./chunk-L63OXFZH.js";
import "./chunk-JNXJ7NW3.js";
import "./chunk-HWHMGAKL.js";
import {
  require_preview_api
} from "./chunk-4PHSYZMN.js";
import {
  require_global
} from "./chunk-NGQA2KVJ.js";
import "./chunk-J6CEENEN.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/@storybook/web-components/dist/chunk-HJCNT6QR.mjs
var import_global = __toESM(require_global(), 1);
var import_preview_api = __toESM(require_preview_api(), 1);
var { window: globalWindow } = import_global.global;
globalWindow.STORYBOOK_ENV = "web-components";
var api = (0, import_preview_api.start)(renderToCanvas);
var forceReRender = api.forceReRender;
var raw = api.clientApi.raw;
function isValidComponent(tagName) {
  if (!tagName)
    return false;
  if (typeof tagName == "string")
    return true;
  throw new Error('Provided component needs to be a string. e.g. component: "my-element"');
}
function isValidMetaData(customElements) {
  if (!customElements)
    return false;
  if (customElements.tags && Array.isArray(customElements.tags) || customElements.modules && Array.isArray(customElements.modules))
    return true;
  throw new Error(`You need to setup valid meta data in your config.js via setCustomElements().
    See the readme of addon-docs for web components for more details.`);
}
function getCustomElements() {
  return import_global.global.__STORYBOOK_CUSTOM_ELEMENTS__ || import_global.global.__STORYBOOK_CUSTOM_ELEMENTS_MANIFEST__;
}
var { window: window2, EventSource } = import_global.global;
var _a;
typeof module < "u" && ((_a = module == null ? void 0 : module.hot) == null ? void 0 : _a.decline) && (module.hot.decline(), new EventSource("__webpack_hmr").addEventListener("message", function(event) {
  try {
    let { action } = JSON.parse(event.data);
    action === "built" && window2.location.reload();
  } catch {
  }
}));

// node_modules/@storybook/web-components/dist/entry-preview-docs.mjs
var import_client_logger = __toESM(require_client_logger(), 1);
var import_preview_api2 = __toESM(require_preview_api(), 1);
function mapItem(item, category) {
  var _a2, _b;
  let type;
  switch (category) {
    case "attributes":
    case "properties":
      type = { name: ((_a2 = item.type) == null ? void 0 : _a2.text) || item.type };
      break;
    case "slots":
      type = { name: "string" };
      break;
    default:
      type = { name: "void" };
      break;
  }
  return { name: item.name, required: false, description: item.description, type, table: { category, type: { summary: ((_b = item.type) == null ? void 0 : _b.text) || item.type }, defaultValue: { summary: item.default !== void 0 ? item.default : item.defaultValue } } };
}
function mapEvent(item) {
  let name = item.name.replace(/(-|_|:|\.|\s)+(.)?/g, (_match, _separator, chr) => chr ? chr.toUpperCase() : "").replace(/^([A-Z])/, (match) => match.toLowerCase());
  return name = `on${name.charAt(0).toUpperCase() + name.substr(1)}`, [{ name, action: { name: item.name }, table: { disable: true } }, mapItem(item, "events")];
}
function mapData(data, category) {
  return data && data.filter((item) => item && item.name).reduce((acc, item) => {
    if (item.kind === "method")
      return acc;
    switch (category) {
      case "events":
        mapEvent(item).forEach((argType) => {
          invariant(argType.name, `${argType} should have a name property.`), acc[argType.name] = argType;
        });
        break;
      default:
        acc[item.name] = mapItem(item, category);
        break;
    }
    return acc;
  }, {});
}
var getMetaDataExperimental = (tagName, customElements) => {
  if (!isValidComponent(tagName) || !isValidMetaData(customElements))
    return null;
  let metaData = customElements.tags.find((tag) => tag.name.toUpperCase() === tagName.toUpperCase());
  return metaData || import_client_logger.logger.warn(`Component not found in custom-elements.json: ${tagName}`), metaData;
};
var getMetaDataV1 = (tagName, customElements) => {
  var _a2;
  if (!isValidComponent(tagName) || !isValidMetaData(customElements))
    return null;
  let metadata;
  return (_a2 = customElements == null ? void 0 : customElements.modules) == null ? void 0 : _a2.forEach((_module) => {
    var _a3;
    (_a3 = _module == null ? void 0 : _module.declarations) == null ? void 0 : _a3.forEach((declaration) => {
      declaration.tagName === tagName && (metadata = declaration);
    });
  }), metadata || import_client_logger.logger.warn(`Component not found in custom-elements.json: ${tagName}`), metadata;
};
var getMetaData = (tagName, manifest) => (manifest == null ? void 0 : manifest.version) === "experimental" ? getMetaDataExperimental(tagName, manifest) : getMetaDataV1(tagName, manifest);
var extractArgTypesFromElements = (tagName, customElements) => {
  let metaData = getMetaData(tagName, customElements);
  return metaData && { ...mapData(metaData.members ?? [], "properties"), ...mapData(metaData.properties ?? [], "properties"), ...mapData(metaData.attributes ?? [], "attributes"), ...mapData(metaData.events ?? [], "events"), ...mapData(metaData.slots ?? [], "slots"), ...mapData(metaData.cssProperties ?? [], "css custom properties"), ...mapData(metaData.cssParts ?? [], "css shadow parts") };
};
var extractArgTypes = (tagName) => {
  let cem = getCustomElements();
  return extractArgTypesFromElements(tagName, cem);
};
var extractComponentDescription = (tagName) => {
  let metaData = getMetaData(tagName, getCustomElements());
  return metaData && metaData.description;
};
var LIT_EXPRESSION_COMMENTS = /<!--\?lit\$[0-9]+\$-->|<!--\??-->/g;
function skipSourceRender(context) {
  var _a2;
  let sourceParams = (_a2 = context == null ? void 0 : context.parameters.docs) == null ? void 0 : _a2.source, isArgsStory = context == null ? void 0 : context.parameters.__isArgsStory;
  return (sourceParams == null ? void 0 : sourceParams.type) === SourceType.DYNAMIC ? false : !isArgsStory || (sourceParams == null ? void 0 : sourceParams.code) || (sourceParams == null ? void 0 : sourceParams.type) === SourceType.CODE;
}
function sourceDecorator(storyFn, context) {
  var _a2, _b;
  let story = storyFn(), renderedForSource = ((_b = (_a2 = context == null ? void 0 : context.parameters.docs) == null ? void 0 : _a2.source) == null ? void 0 : _b.excludeDecorators) ? context.originalStoryFn(context.args, context) : story, source;
  if ((0, import_preview_api2.useEffect)(() => {
    let { id, unmappedArgs } = context;
    source && import_preview_api2.addons.getChannel().emit(SNIPPET_RENDERED, { id, source, args: unmappedArgs });
  }), !skipSourceRender(context)) {
    let container = window.document.createElement("div");
    renderedForSource instanceof DocumentFragment ? render(renderedForSource.cloneNode(true), container) : render(renderedForSource, container), source = container.innerHTML.replace(LIT_EXPRESSION_COMMENTS, "");
  }
  return story;
}
var decorators = [sourceDecorator];
var parameters = { docs: { extractArgTypes, extractComponentDescription, story: { inline: true }, source: { type: SourceType.DYNAMIC, language: "html" } } };
var argTypesEnhancers = [enhanceArgTypes];
export {
  argTypesEnhancers,
  decorators,
  parameters
};
//# sourceMappingURL=@storybook_web-components_dist_entry-preview-docs__mjs.js.map
